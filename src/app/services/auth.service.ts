import { Injectable } from "@angular/core"
import { BehaviorSubject } from "rxjs"
import { DatabaseService } from "./database.service"

@Injectable({
  providedIn: "root",
})
export class AuthService {
  private isLoggedInSubject = new BehaviorSubject<boolean>(false)
  public isLoggedIn$ = this.isLoggedInSubject.asObservable()

  constructor(private databaseService: DatabaseService) {
    // Verificar si ya hay una sesi√≥n activa al inicializar
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true"
    this.isLoggedInSubject.next(isLoggedIn)

    // Si ya est√° logueado, inicializar la base de datos
    if (isLoggedIn) {
      console.log("üîÑ Sesi√≥n activa detectada, inicializando IndexedDB...")
      this.initializeDatabaseAsync()
    }
  }

  private async initializeDatabaseAsync() {
    try {
      // Esperar un poco para que IndexedDB est√© completamente listo
      await new Promise((resolve) => setTimeout(resolve, 1000))

      console.log("üîÑ Inicializando IndexedDB para sesi√≥n existente...")
      const dbInitialized = await this.databaseService.initializeDatabase()

      if (dbInitialized) {
        console.log("‚úÖ IndexedDB inicializada para sesi√≥n existente")
      } else {
        console.warn("‚ö†Ô∏è Fallo inicializando IndexedDB para sesi√≥n existente")
      }
    } catch (error) {
      console.error("‚ùå Error inicializando IndexedDB para sesi√≥n existente:", error)
    }
  }

  public async login(username: string): Promise<boolean> {
    try {
      console.log(`üîê Iniciando sesi√≥n para: ${username}`)

      localStorage.setItem("isLoggedIn", "true")
      localStorage.setItem("username", username)
      localStorage.setItem("loginTime", new Date().toISOString())

      // Esperar un poco para que IndexedDB est√© completamente listo
      console.log("‚è≥ Esperando que IndexedDB est√© completamente listo...")
      await new Promise((resolve) => setTimeout(resolve, 1500))

      // Inicializar base de datos al hacer login
      console.log("üîÑ Inicializando IndexedDB despu√©s del login...")
      const dbInitialized = await this.databaseService.initializeDatabase()

      if (dbInitialized) {
        this.isLoggedInSubject.next(true)
        console.log("‚úÖ Login exitoso e IndexedDB inicializada")

        // Mostrar estad√≠sticas
        const stats = await this.databaseService.getStats()
        console.log(`üìä Estad√≠sticas: ${stats.animals} animales, ${stats.eventos} eventos`)

        return true
      } else {
        // Si falla la inicializaci√≥n de la DB, continuar sin base de datos
        console.warn("‚ö†Ô∏è Fallo en inicializaci√≥n de IndexedDB, continuando sin base de datos")
        this.isLoggedInSubject.next(true)
        return true
      }
    } catch (error) {
      console.error("‚ùå Error en login:", error)
      return false
    }
  }

  public async logout(): Promise<void> {
    console.log("üö™ Cerrando sesi√≥n...")

    localStorage.removeItem("isLoggedIn")
    localStorage.removeItem("username")
    localStorage.removeItem("loginTime")

    // Cerrar base de datos al hacer logout
    await this.databaseService.closeDatabase()

    this.isLoggedInSubject.next(false)
    console.log("‚úÖ Sesi√≥n cerrada correctamente")
  }

  public isLoggedIn(): boolean {
    return localStorage.getItem("isLoggedIn") === "true"
  }

  public getUsername(): string | null {
    return localStorage.getItem("username")
  }

  public getCurrentUser(): string | null {
    return this.getUsername()
  }

  public getLoginTime(): Date | null {
    const loginTime = localStorage.getItem("loginTime")
    return loginTime ? new Date(loginTime) : null
  }

  public isSessionValid(): boolean {
    const loginTime = this.getLoginTime()
    if (!loginTime) return false

    // Sesi√≥n v√°lida por 24 horas
    const now = new Date()
    const diffHours = (now.getTime() - loginTime.getTime()) / (1000 * 60 * 60)
    return diffHours < 24
  }

  public isDatabaseReady(): boolean {
    return this.databaseService.isReady()
  }
}
