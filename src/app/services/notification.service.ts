import { Injectable } from '@angular/core';
import { DatabaseService } from './database.service';
import { AlertController, ToastController } from '@ionic/angular';

export interface Notification {
  id: string;
  tipo: "Celo" | "Vacunaci√≥n" | "Inseminaci√≥n" | "Parto" | "Sistema";
  titulo: string;
  mensaje: string;
  fecha: string;
  hora: string;
  leida: boolean;
  prioridad: "Alta" | "Media" | "Baja";
  animalId?: string;
  animalNombre?: string;
  fechaCreacion: string;
  eventoId?: string; // Para evitar duplicados
  createdDate?: string; // Para control de limpieza
}

@Injectable({
  providedIn: 'root'
})
export class NotificationService {

  private lastNotificationCheck: string = '';

  constructor(
    private databaseService: DatabaseService,
    private alertController: AlertController,
    private toastController: ToastController
  ) {
    console.log('‚úÖ NotificationService inicializado');
  }

  /**
   * Crear tabla de notificaciones con campos para evitar duplicados
   */
  async createNotificationsTable(): Promise<void> {
    const schema = `
      CREATE TABLE IF NOT EXISTS notifications (
        id TEXT PRIMARY KEY,
        tipo TEXT NOT NULL,
        titulo TEXT NOT NULL,
        mensaje TEXT NOT NULL,
        fecha TEXT NOT NULL,
        hora TEXT NOT NULL,
        leida INTEGER DEFAULT 0,
        prioridad TEXT NOT NULL,
        animalId TEXT,
        animalNombre TEXT,
        fechaCreacion TEXT NOT NULL,
        eventoId TEXT UNIQUE,
        createdDate TEXT NOT NULL
      )
    `;

    try {
      const db = this.databaseService.getDatabase();
      if (!db) {
        throw new Error('Base de datos no disponible');
      }
      
      await db.execute(schema);
      console.log('‚úÖ Tabla de notificaciones creada/verificada');
    } catch (error) {
      console.error('‚ùå Error creando tabla de notificaciones:', error);
      throw error;
    }
  }

  /**
   * Obtener todas las notificaciones
   */
  async getAllNotifications(): Promise<Notification[]> {
    try {
      if (!this.databaseService.isReady()) {
        console.warn('‚ö†Ô∏è Base de datos no disponible');
        return [];
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return [];
      }

      const result = await db.query(
        "SELECT * FROM notifications ORDER BY fecha DESC, hora DESC"
      );

      if (result.values) {
        return result.values.map((notif: any) => ({
          ...notif,
          leida: notif.leida === 1
        }));
      }

      return [];

    } catch (error) {
      console.error('‚ùå Error obteniendo notificaciones:', error);
      return [];
    }
  }

  /**
   * Verificar si ya existe una notificaci√≥n para un evento
   */
  private async notificationExists(eventoId: string, tipo: string, fecha: string, titulo: string): Promise<boolean> {
    try {
      const db = this.databaseService.getDatabase();
      if (!db) return false;

      // Verificar por eventoId (m√©todo m√°s seguro)
      if (eventoId) {
        const result = await db.query(
          "SELECT id FROM notifications WHERE eventoId = ?",
          [eventoId]
        );
        if (result.values && result.values.length > 0) {
          return true;
        }
      }

      // Verificar por tipo, animal, fecha y t√≠tulo (fallback)
      const result = await db.query(
        "SELECT id FROM notifications WHERE tipo = ? AND animalId = ? AND fecha = ? AND titulo = ?",
        [tipo, eventoId, fecha, titulo]
      );

      return !!(result.values && result.values.length > 0);
    } catch (error) {
      console.error('‚ùå Error verificando notificaci√≥n existente:', error);
      return false;
    }
  }

  /**
   * Crear nueva notificaci√≥n (con control de duplicados)
   */
  async createNotification(notification: Omit<Notification, 'id' | 'fechaCreacion'>): Promise<boolean> {
    try {
      if (!this.databaseService.isReady()) {
        console.error('‚ùå Base de datos no disponible');
        return false;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return false;
      }

      // Verificar si ya existe una notificaci√≥n similar
      if (notification.eventoId) {
        const exists = await this.notificationExists(
          notification.eventoId,
          notification.tipo,
          notification.fecha,
          notification.titulo
        );

        if (exists) {
          console.log('‚ÑπÔ∏è Notificaci√≥n ya existe, omitiendo...');
          return true;
        }
      }

      const id = `N-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
      const sql = `
        INSERT INTO notifications (id, tipo, titulo, mensaje, fecha, hora, prioridad, animalId, animalNombre, fechaCreacion, leida, eventoId, createdDate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;

      const params = [
        id,
        notification.tipo,
        notification.titulo,
        notification.mensaje,
        notification.fecha,
        notification.hora,
        notification.prioridad,
        notification.animalId || null,
        notification.animalNombre || null,
        new Date().toISOString(),
        notification.leida ? 1 : 0,
        notification.eventoId || null,
        new Date().toISOString()
      ];

      const result = await db.run(sql, params);
      const changes = result.changes?.changes || 0;

      if (changes > 0) {
        console.log('‚úÖ Notificaci√≥n creada:', id);
        return true;
      }

      return false;

    } catch (error) {
      // Si es error de constraint UNIQUE, ignorar silenciosamente
      if (error instanceof Error && error.message.includes('UNIQUE constraint failed')) {
        console.log('‚ÑπÔ∏è Notificaci√≥n duplicada (constraint), ignorando...');
        return true;
      }
      console.error('‚ùå Error creando notificaci√≥n:', error);
      return false;
    }
  }

  /**
   * Generar notificaciones autom√°ticas SIN DUPLICADOS
   */
  async generateEventNotifications(): Promise<number> {
    try {
      const hoy = new Date().toISOString().split('T')[0];
      
      // Evitar generar notificaciones m√∫ltiples veces el mismo d√≠a
      if (this.lastNotificationCheck === hoy) {
        console.log('üîî Notificaciones ya generadas hoy, omitiendo...');
        return 0;
      }

      const eventos = await this.databaseService.getAllEventos();
      console.log(`üîç Verificando ${eventos.length} eventos para notificaciones`);

      let notificationsCreated = 0;

      for (const evento of eventos) {
        // Notificar eventos atrasados
        if (evento.fecha < hoy && evento.estado !== 'Realizado') {
          const success = await this.createNotification({
            tipo: evento.tipo as any,
            titulo: 'Evento Atrasado',
            mensaje: `${evento.animalNombre} tiene ${evento.tipo.toLowerCase()} pendiente desde ${evento.fecha}`,
            fecha: hoy,
            hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
            prioridad: 'Alta',
            animalId: evento.animalId,
            animalNombre: evento.animalNombre,
            leida: false,
            eventoId: `atrasado_${evento.id}` // ID √∫nico para este tipo de notificaci√≥n
          });

          if (success) notificationsCreated++;
        }

        // Notificar eventos para hoy
        if (evento.fecha === hoy && evento.estado !== 'Realizado') {
          const success = await this.createNotification({
            tipo: evento.tipo as any,
            titulo: 'Evento para Hoy',
            mensaje: `${evento.animalNombre} tiene ${evento.tipo.toLowerCase()} programado para hoy`,
            fecha: hoy,
            hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
            prioridad: 'Media',
            animalId: evento.animalId,
            animalNombre: evento.animalNombre,
            leida: false,
            eventoId: `hoy_${evento.id}` // ID √∫nico para este tipo de notificaci√≥n
          });

          if (success) notificationsCreated++;
        }
      }

      this.lastNotificationCheck = hoy;
      console.log(`‚úÖ ${notificationsCreated} notificaciones nuevas generadas`);
      return notificationsCreated;

    } catch (error) {
      console.error('‚ùå Error generando notificaciones autom√°ticas:', error);
      return 0;
    }
  }

  /**
   * Marcar notificaci√≥n como le√≠da
   */
  async markAsRead(id: string): Promise<boolean> {
    try {
      if (!this.databaseService.isReady()) {
        return false;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return false;
      }

      const sql = "UPDATE notifications SET leida = 1 WHERE id = ?";
      const result = await db.run(sql, [id]);
      
      const changes = result.changes?.changes || 0;
      if (changes > 0) {
        console.log('‚úÖ Notificaci√≥n marcada como le√≠da:', id);
      }
      return changes > 0;

    } catch (error) {
      console.error('‚ùå Error marcando notificaci√≥n como le√≠da:', error);
      return false;
    }
  }

  /**
   * Marcar todas como le√≠das
   */
  async markAllAsRead(): Promise<boolean> {
    try {
      if (!this.databaseService.isReady()) {
        return false;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return false;
      }

      const sql = "UPDATE notifications SET leida = 1 WHERE leida = 0";
      const result = await db.run(sql);
      
      const changes = result.changes?.changes || 0;
      if (changes > 0) {
        console.log(`‚úÖ ${changes} notificaciones marcadas como le√≠das`);
      }
      return changes > 0;

    } catch (error) {
      console.error('‚ùå Error marcando todas como le√≠das:', error);
      return false;
    }
  }

  /**
   * Eliminar notificaci√≥n
   */
  async deleteNotification(id: string): Promise<boolean> {
    try {
      if (!this.databaseService.isReady()) {
        return false;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return false;
      }

      const sql = "DELETE FROM notifications WHERE id = ?";
      const result = await db.run(sql, [id]);
      
      const changes = result.changes?.changes || 0;
      if (changes > 0) {
        console.log('‚úÖ Notificaci√≥n eliminada:', id);
      }
      return changes > 0;

    } catch (error) {
      console.error('‚ùå Error eliminando notificaci√≥n:', error);
      return false;
    }
  }

  /**
   * Eliminar todas las notificaciones
   */
  async clearAllNotifications(): Promise<boolean> {
    try {
      if (!this.databaseService.isReady()) {
        return false;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return false;
      }

      const sql = "DELETE FROM notifications";
      const result = await db.run(sql);
      
      console.log('‚úÖ Todas las notificaciones eliminadas');
      return true;

    } catch (error) {
      console.error('‚ùå Error eliminando todas las notificaciones:', error);
      return false;
    }
  }

  /**
   * Obtener notificaciones no le√≠das
   */
  async getUnreadNotifications(): Promise<Notification[]> {
    try {
      if (!this.databaseService.isReady()) {
        return [];
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return [];
      }

      const result = await db.query(
        "SELECT * FROM notifications WHERE leida = 0 ORDER BY fecha DESC, hora DESC"
      );

      if (result.values) {
        return result.values.map((notif: any) => ({
          ...notif,
          leida: notif.leida === 1
        }));
      }

      return [];

    } catch (error) {
      console.error('‚ùå Error obteniendo notificaciones no le√≠das:', error);
      return [];
    }
  }

  /**
   * Obtener notificaci√≥n por ID
   */
  async getNotificationById(id: string): Promise<Notification | null> {
    try {
      if (!this.databaseService.isReady()) {
        return null;
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return null;
      }

      const sql = "SELECT * FROM notifications WHERE id = ?";
      const result = await db.query(sql, [id]);

      if (result.values && result.values.length > 0) {
        const notif = result.values[0];
        return {
          ...notif,
          leida: notif.leida === 1
        };
      }

      return null;

    } catch (error) {
      console.error('‚ùå Error obteniendo notificaci√≥n por ID:', error);
      return null;
    }
  }

  /**
   * Crear notificaci√≥n del sistema
   */
  async createSystemNotification(titulo: string, mensaje: string, prioridad: "Alta" | "Media" | "Baja" = "Media"): Promise<boolean> {
    const notification: Omit<Notification, 'id' | 'fechaCreacion'> = {
      tipo: "Sistema",
      titulo,
      mensaje,
      fecha: new Date().toISOString().split('T')[0],
      hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
      prioridad,
      leida: false,
      eventoId: `sistema_${Date.now()}` // ID √∫nico para notificaciones del sistema
    };

    return await this.createNotification(notification);
  }

  /**
   * Limpiar notificaciones antiguas (m√°s de 30 d√≠as)
   */
  async cleanupOldNotifications(): Promise<number> {
    try {
      const db = this.databaseService.getDatabase();
      if (!db) return 0;

      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const result = await db.run(
        "DELETE FROM notifications WHERE createdDate < ? AND leida = 1",
        [thirtyDaysAgo.toISOString()]
      );

      const deletedCount = result.changes?.changes || 0;
      if (deletedCount > 0) {
        console.log(`üßπ ${deletedCount} notificaciones antiguas eliminadas`);
      }
      
      return deletedCount;
    } catch (error) {
      console.error('‚ùå Error limpiando notificaciones antiguas:', error);
      return 0;
    }
  }

  /**
   * Obtener estad√≠sticas de notificaciones
   */
  async getNotificationStats(): Promise<{ total: number; unread: number; read: number }> {
    try {
      if (!this.databaseService.isReady()) {
        return { total: 0, unread: 0, read: 0 };
      }

      const db = this.databaseService.getDatabase();
      if (!db) {
        return { total: 0, unread: 0, read: 0 };
      }

      const totalResult = await db.query("SELECT COUNT(*) as count FROM notifications");
      const unreadResult = await db.query("SELECT COUNT(*) as count FROM notifications WHERE leida = 0");

      const total = totalResult.values?.[0]?.count || 0;
      const unread = unreadResult.values?.[0]?.count || 0;
      const read = total - unread;

      return { total, unread, read };

    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas de notificaciones:', error);
      return { total: 0, unread: 0, read: 0 };
    }
  }

  /**
   * Reiniciar el control de notificaciones (√∫til para testing)
   */
  resetNotificationCheck(): void {
    this.lastNotificationCheck = '';
    console.log('üîÑ Control de notificaciones reiniciado');
  }

  /**
   * Inicializar el servicio de notificaciones
   */
  async initialize(): Promise<boolean> {
    try {
      await this.createNotificationsTable();
      await this.cleanupOldNotifications();
      console.log('‚úÖ NotificationService inicializado correctamente');
      return true;
    } catch (error) {
      console.error('‚ùå Error inicializando NotificationService:', error);
      return false;
    }
  }
}